// index.js
require("dotenv").config({
  path: "/opt/tg-beautynumber-bot/.env",
  override: true,
});

const { Telegraf, Scenes, session, Markup } = require("telegraf");

const BOT_TOKEN = process.env.BOT_TOKEN || "";
const TARGET_CHAT_ID = Number(process.env.TARGET_CHAT_ID || 0);

// –î–æ–ø. —Ü–µ–ª–∏: @username –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
const RAW_EXTRA = (process.env.EXTRA_CHAT_IDS || "")
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean);

// –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
const CHAT_TARGETS = Array.from(
  new Set(
    [TARGET_CHAT_ID ? String(TARGET_CHAT_ID) : null, ...RAW_EXTRA].filter(
      Boolean
    )
  )
);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞
console.log("BOT_TOKEN length:", BOT_TOKEN.length);
console.log("BOT_TOKEN has whitespace?", /\s/.test(BOT_TOKEN));

const tokenLooksValid = /^\d+:[A-Za-z0-9_\-]{30,}$/.test(BOT_TOKEN);
if (!tokenLooksValid) {
  console.error(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç digits:hash). –ü—Ä–æ–≤–µ—Ä—å .env"
  );
  process.exit(1);
}
if (CHAT_TARGETS.length === 0) {
  console.warn(
    "WARNING: –Ω–µ –∑–∞–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (TARGET_CHAT_ID/EXTRA_CHAT_IDS)."
  );
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ —Ü–µ–ª–∏
async function sendToAll(tg, text, extra) {
  if (CHAT_TARGETS.length === 0) return false;
  console.log("[sendToAll] targets:", CHAT_TARGETS.join(", "));
  let ok = false;
  for (const target of CHAT_TARGETS) {
    try {
      const chatId = /^-?\d+$/.test(target) ? Number(target) : target;
      await tg.sendMessage(chatId, text, extra);
      ok = true;
      console.log("[sendToAll] sent ->", target);
    } catch (e) {
      console.error(
        "[sendToAll] error ->",
        target,
        e?.description || e?.message || e
      );
    }
  }
  return ok;
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// REQUIRED SUBSCRIPTIONS (–ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º)

const REQUIRED_CHANNELS = ["@vipstoresim", "@nomera_russian"];

/** –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ */
async function isChannelMember(tg, channel, userId) {
  try {
    const m = await tg.getChatMember(channel, userId);
    return ["creator", "administrator", "member"].includes(m.status);
  } catch (e) {
    console.error(
      "[checkSub] getChatMember failed:",
      channel,
      e?.description || e?.message || e
    );
    return false;
  }
}

/** –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω */
async function getMissingSubs(tg, userId) {
  const missing = [];
  for (const ch of REQUIRED_CHANNELS) {
    const ok = await isChannelMember(tg, ch, userId);
    if (!ok) missing.push(ch);
  }
  return missing;
}

/** –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å¬ª */
function subscribeKeyboard(channels) {
  const rows = channels.map((ch) => {
    const url = `https://t.me/${String(ch).replace("@", "")}`;
    return [Markup.button.url(`‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: ${ch}`, url)];
  });
  rows.push([Markup.button.callback("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "chk_sub")]);
  return Markup.inlineKeyboard(rows);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// UI

const mainMenu = () =>
  Markup.keyboard([["üü¢ –ü—Ä–æ–¥–∞—Ç—å", "üîé –ö—É–ø–∏—Ç—å"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]])
    .resize()
    .persistent();

const operatorInlineKeyboard = () =>
  Markup.inlineKeyboard([
    [
      Markup.button.callback("–ú–¢–°", "op|–ú–¢–°"),
      Markup.button.callback("–ë–∏–ª–∞–π–Ω", "op|–ë–∏–ª–∞–π–Ω"),
    ],
    [
      Markup.button.callback("–ú–µ–≥–∞–§–æ–Ω", "op|–ú–µ–≥–∞–§–æ–Ω"),
      Markup.button.callback("Tele2", "op|Tele2"),
    ],
    [Markup.button.callback("‚úçÔ∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", "op|other")],
  ]);

const confirmKeyboard = (prefix) =>
  Markup.inlineKeyboard([
    [Markup.button.callback("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", `${prefix}_confirm`)],
    [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", `${prefix}_cancel`)],
  ]);

const escapeHTML = (s = "") =>
  s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

const formatRUB = (n) => {
  if (n === null || n === undefined || n === "") return "";
  const num = Number(String(n).replace(/[^\d]/g, ""));
  if (!Number.isFinite(num)) return String(n);
  return num.toLocaleString("ru-RU") + " ‚ÇΩ";
};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// SELL

const sellWizard = new Scenes.WizardScene(
  "sell-wizard",

  async (ctx) => {
    await ctx.replyWithHTML(
      "‚ú® <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
      operatorInlineKeyboard()
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.callbackQuery?.data?.startsWith("op|")) {
      const val = ctx.callbackQuery.data.split("|")[1];
      await ctx.answerCbQuery();
      if (val === "other") {
        await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:");
        return;
      } else {
        ctx.wizard.state.operator = val;
      }
    } else if (ctx.message?.text) {
      ctx.wizard.state.operator = ctx.message.text.trim();
    } else return;

    await ctx.replyWithHTML("üó∫Ô∏è –£–∫–∞–∂–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω –Ω–æ–º–µ—Ä–∞</b>:");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.region = ctx.message.text.trim();
    await ctx.replyWithHTML("üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.number = ctx.message.text.trim();
    await ctx.replyWithHTML("üí∞ –£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> (–≤ —Ä—É–±–ª—è—Ö):");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.price = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω):"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.contact = ctx.message.text.trim();

    const d = ctx.wizard.state;
    const preview =
      "üìû <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
      `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
      `–ù–æ–º–µ—Ä: <b>${escapeHTML(d.number)}</b>\n` +
      `–¶–µ–Ω–∞: <b>${escapeHTML(formatRUB(d.price))}</b>\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>`;

    await ctx.replyWithHTML(
      "üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:"
    );
    await ctx.replyWithHTML(preview, confirmKeyboard("sell"));
    return ctx.wizard.next();
  },

  // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  async (ctx) => {
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;
    await ctx.answerCbQuery();

    if (data === "sell_confirm") {
      const d = ctx.wizard.state;
      const post =
        "üìû <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
        `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
        `–ù–æ–º–µ—Ä: <b>${escapeHTML(d.number)}</b>\n` +
        `–¶–µ–Ω–∞: <b>${escapeHTML(formatRUB(d.price))}</b>\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>`;

      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        ctx.wizard.state.__pendingPost = post;
        ctx.wizard.state.__intent = "sell";
        await ctx.replyWithHTML(
          "–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª:",
          subscribeKeyboard(missing)
        );
        return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —à–∞–≥–µ
      }

      try {
        const sent = await sendToAll(ctx.telegram, post, {
          parse_mode: "HTML",
        });
        if (sent) {
          await ctx.replyWithHTML(
            "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!",
            mainMenu()
          );
        } else {
          await ctx.replyWithHTML(
            "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID/EXTRA_CHAT_IDS.",
            mainMenu()
          );
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e);
        await ctx.replyWithHTML(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞.",
          mainMenu()
        );
      }
      return ctx.scene.leave();
    } else if (data === "sell_cancel") {
      await ctx.replyWithHTML("‚ùé –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
  }
);

sellWizard.command("cancel", async (ctx) => {
  await ctx.replyWithHTML("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
  return ctx.scene.leave();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// BUY

const buyWizard = new Scenes.WizardScene(
  "buy-wizard",

  async (ctx) => {
    await ctx.replyWithHTML(
      "üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–º–µ—Ä–∞</b>\n\n" +
        "‚úçÔ∏è <b>–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä –∏—â–∏—Ç–µ?</b>\n" +
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>9999 –Ω–∞ –∫–æ–Ω—Ü–µ</code>, <code>***7777</code>, <code>–∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–¥</code>"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.pattern = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üì° –í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</–±> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
      operatorInlineKeyboard()
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.callbackQuery?.data?.startsWith("op|")) {
      const val = ctx.callbackQuery.data.split("|")[1];
      await ctx.answerCbQuery();
      if (val === "other") {
        await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:");
        return;
      } else {
        ctx.wizard.state.operator = val;
      }
    } else if (ctx.message?.text) {
      ctx.wizard.state.operator = ctx.message.text.trim();
    } else return;

    await ctx.replyWithHTML(
      "üí∞ <b>–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?</b> (—Ä—É–±.)\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>12000</code>"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.budget = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üó∫Ô∏è <b>–†–µ–≥–∏–æ–Ω –Ω–æ–º–µ—Ä–∞</b> (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫):"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.region = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω):"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.contact = ctx.message.text.trim();
    await ctx.replyWithHTML("üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.comment = ctx.message.text.trim();

    const d = ctx.wizard.state;
    const preview =
      "üîé <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
      `–ò—â—É –Ω–æ–º–µ—Ä: <b>${escapeHTML(d.pattern)}</b>\n` +
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
      `–ë—é–¥–∂–µ—Ç: <b>${escapeHTML(formatRUB(d.budget))}</b>\n` +
      `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>\n` +
      `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${escapeHTML(d.comment)}</b>`;

    await ctx.replyWithHTML(
      "üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    );
    await ctx.replyWithHTML(preview, confirmKeyboard("buy"));
    return ctx.wizard.next();
  },

  // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  async (ctx) => {
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;
    await ctx.answerCbQuery();

    if (data === "buy_confirm") {
      const d = ctx.wizard.state;
      const post =
        "üîé <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
        `–ò—â—É –Ω–æ–º–µ—Ä: <b>${escapeHTML(d.pattern)}</b>\n` +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
        `–ë—é–¥–∂–µ—Ç: <b>${escapeHTML(formatRUB(d.budget))}</b>\n` +
        `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${escapeHTML(d.comment)}</b>`;

      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        ctx.wizard.state.__pendingPost = post;
        ctx.wizard.state.__intent = "buy";
        await ctx.replyWithHTML(
          "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª:",
          subscribeKeyboard(missing)
        );
        return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —à–∞–≥–µ
      }

      try {
        const sent = await sendToAll(ctx.telegram, post, {
          parse_mode: "HTML",
        });
        if (sent) {
          await ctx.replyWithHTML(
            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!",
            mainMenu()
          );
        } else {
          await ctx.replyWithHTML(
            "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID/EXTRA_CHAT_IDS.",
            mainMenu()
          );
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e);
        await ctx.replyWithHTML(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞.",
          mainMenu()
        );
      }
      return ctx.scene.leave();
    } else if (data === "buy_cancel") {
      await ctx.replyWithHTML("‚ùé –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
  }
);

buyWizard.command("cancel", async (ctx) => {
  await ctx.replyWithHTML("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
  return ctx.scene.leave();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Bootstrap

async function bootstrap() {
  const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 30_000 });

  const stage = new Scenes.Stage([sellWizard, buyWizard]);
  bot.use(session());
  bot.use(stage.middleware());

  const sendWelcome = async (ctx) => {
    const text =
      "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n" +
      "–Ø –ø–æ–º–æ–≥—É <b>–ø—Ä–æ–¥–∞—Ç—å</b> –∏–ª–∏ <b>–∫—É–ø–∏—Ç—å</b> –∫—Ä–∞—Å–∏–≤—ã–π –Ω–æ–º–µ—Ä.\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:";
    await ctx.replyWithHTML(text, mainMenu());
  };

  bot.start(sendWelcome);
  bot.command("menu", sendWelcome);

  bot.hears("‚ÑπÔ∏è –ü–æ–º–æ—â—å", async (ctx) => {
    await ctx.replyWithHTML(
      "üìñ <b>–ü–æ–º–æ—â—å</b>\n" +
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üü¢ –ü—Ä–æ–¥–∞—Ç—å</b>, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n" +
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üîé –ö—É–ø–∏—Ç—å</b>, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n" +
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>/cancel</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n" +
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ <b>/menu</b> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    );
  });

  bot.hears("üü¢ –ü—Ä–æ–¥–∞—Ç—å", (ctx) => ctx.scene.enter("sell-wizard"));
  bot.hears("üîé –ö—É–ø–∏—Ç—å", (ctx) => ctx.scene.enter("buy-wizard"));

  bot.command("sell", (ctx) => ctx.scene.enter("sell-wizard"));
  bot.command("buy", (ctx) => ctx.scene.enter("buy-wizard"));

  bot.command("cancel", async (ctx) => {
    if (ctx.scene?.current) {
      await ctx.replyWithHTML("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
    await sendWelcome(ctx);
  });

  bot.on("text", async (ctx, next) => {
    if (ctx.scene?.current) return next();
    return sendWelcome(ctx);
  });

  // –ö–Ω–æ–ø–∫–∞ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª (–í–ù–£–¢–†–ò bootstrap)
  bot.action("chk_sub", async (ctx) => {
    try {
      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        await ctx.answerCbQuery(`–ï—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞: ${missing.join(", ")}`, {
          show_alert: false,
        });
        return;
      }
      const st = ctx.scene?.state;
      const post = st?.__pendingPost;
      if (post) {
        try {
          const sent = await sendToAll(ctx.telegram, post, {
            parse_mode: "HTML",
          });
          if (sent) {
            try {
              await ctx.editMessageText(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ."
              );
            } catch {}
            await ctx.replyWithHTML("–ì–æ—Ç–æ–≤–æ! –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", mainMenu());
          } else {
            await ctx.replyWithHTML(
              "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID/EXTRA_CHAT_IDS.",
              mainMenu()
            );
          }
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:", e);
          await ctx.replyWithHTML(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            mainMenu()
          );
        }
        delete st.__pendingPost;
        delete st.__intent;
        return ctx.scene.leave();
      }
      await ctx.answerCbQuery("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.", {
        show_alert: false,
      });
    } catch (e) {
      console.error("chk_sub error:", e);
      await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
        show_alert: true,
      });
    }
  });

  try {
    await bot.telegram.deleteWebhook();
  } catch (e) {
    console.warn(
      "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å):",
      e?.description || e?.message || e
    );
  }

  await bot.launch({ dropPendingUpdates: true });
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling).");

  process.once("SIGINT", () => bot.stop("SIGINT"));
  process.once("SIGTERM", () => bot.stop("SIGTERM"));
}

bootstrap().catch((e) => {
  console.error("Fatal error:", e);
  process.exit(1);
});
