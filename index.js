// index.js
require("dotenv").config();

const { Telegraf, Scenes, session, Markup } = require("telegraf");

const BOT_TOKEN = process.env.BOT_TOKEN || "";
const TARGET_CHAT_ID = Number(process.env.TARGET_CHAT_ID || 0);

// –î–æ–ø. —Ü–µ–ª–∏: @username –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
const RAW_EXTRA = (process.env.EXTRA_CHAT_IDS || "")
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean);

// –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
const CHAT_TARGETS = Array.from(
  new Set(
    [TARGET_CHAT_ID ? String(TARGET_CHAT_ID) : null, ...RAW_EXTRA].filter(
      Boolean
    )
  )
);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞
console.log("BOT_TOKEN length:", BOT_TOKEN.length);
console.log("BOT_TOKEN has whitespace?", /\s/.test(BOT_TOKEN));
console.log("TARGET_CHAT_ID:", TARGET_CHAT_ID);
console.log("EXTRA_CHAT_IDS:", process.env.EXTRA_CHAT_IDS);
console.log("CHAT_TARGETS:", CHAT_TARGETS);

const tokenLooksValid = /^\d+:[A-Za-z0-9_\-]{30,}$/.test(BOT_TOKEN);
if (!tokenLooksValid) {
  console.error(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç digits:hash). –ü—Ä–æ–≤–µ—Ä—å .env"
  );
  process.exit(1);
}
if (CHAT_TARGETS.length === 0) {
  console.warn(
    "WARNING: –Ω–µ –∑–∞–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (TARGET_CHAT_ID/EXTRA_CHAT_IDS)."
  );
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ —Ü–µ–ª–∏
async function sendToAll(tg, text, extra) {
  if (CHAT_TARGETS.length === 0) return false;
  console.log("[sendToAll] targets:", CHAT_TARGETS.join(", "));
  let ok = false;
  for (const target of CHAT_TARGETS) {
    try {
      const chatId = /^-?\d+$/.test(target) ? Number(target) : target;
      await tg.sendMessage(chatId, text, extra);
      ok = true;
      console.log("[sendToAll] sent ->", target);
    } catch (e) {
      console.error(
        "[sendToAll] error ->",
        target,
        e?.description || e?.message || e
      );
    }
  }
  return ok;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function formatChannelsList() {
  if (CHAT_TARGETS.length === 0) return "";
  
  console.log('[formatChannelsList] –í—Å–µ —Ü–µ–ª–∏:', CHAT_TARGETS);
  
  const channelNames = CHAT_TARGETS
    .filter(target => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @) –∏–ª–∏ –∫–∞–Ω–∞–ª—ã —Å ID –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å -100
      if (target.startsWith('@')) {
        console.log('[formatChannelsList] –í–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ @:', target);
        return true;
      }
      // –ò—Å–∫–ª—é—á–∞–µ–º ID –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (–æ–±—ã—á–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ –º–∏–ª–ª–∏–∞—Ä–¥–∞)
      if (/^-?\d+$/.test(target)) {
        const id = Number(target);
        const isChannel = id < -1000000000; // -1,000,000,000
        console.log(`[formatChannelsList] ID ${target}: ${isChannel ? '–∫–∞–Ω–∞–ª' : '–ª–∏—á–Ω—ã–π —á–∞—Ç'} (–∏—Å–∫–ª—é—á–∞–µ–º: ${!isChannel})`);
        return isChannel;
      }
      console.log('[formatChannelsList] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–∫–ª—é—á–∞–µ–º:', target);
      return false;
    })
    .map(target => {
      // –ï—Å–ª–∏ —ç—Ç–æ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @), –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (target.startsWith('@')) {
        return target;
      }
      // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å username
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º ID
      return target;
    });
  
  console.log('[formatChannelsList] –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', channelNames);
  return channelNames.join(", ");
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// REQUIRED SUBSCRIPTIONS (–ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º)

const REQUIRED_CHANNELS = ["@vipstoresim", "@nomera_russian"];

/** –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ */
async function isChannelMember(tg, channel, userId) {
  try {
    console.log(
      `[checkSub] –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channel}`
    );
    const m = await tg.getChatMember(channel, userId);
    const validStatuses = ["creator", "administrator", "member"];
    const isValid = validStatuses.includes(m.status);
    console.log(
      `[checkSub] ${channel} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${m.status} (${
        isValid ? "OK" : "–ù–ï–¢"
      })`
    );
    return isValid;
  } catch (e) {
    const errorMsg = e?.description || e?.message || e;
    console.error(
      "[checkSub] getChatMember failed:",
      channel,
      "user:",
      userId,
      "error:",
      errorMsg
    );

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "user not found" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    if (
      errorMsg.includes("user not found") ||
      errorMsg.includes("USER_NOT_PARTICIPANT")
    ) {
      console.log(
        `[checkSub] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –ù–ï —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ ${channel}`
      );
      return false;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "chat not found" - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞
    if (errorMsg.includes("chat not found")) {
      console.error(
        `[checkSub] –í–ù–ò–ú–ê–ù–ò–ï: –ö–∞–Ω–∞–ª ${channel} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username.`
      );
      return false;
    }

    // –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    return false;
  }
}

/** –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω */
async function getMissingSubs(tg, userId) {
  console.log(`[getMissingSubs] –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  const missing = [];
  for (const ch of REQUIRED_CHANNELS) {
    const ok = await isChannelMember(tg, ch, userId);
    if (!ok) {
      missing.push(ch);
      console.log(
        `[getMissingSubs] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${ch}`
      );
    } else {
      console.log(`[getMissingSubs] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${ch}`);
    }
  }
  console.log(
    `[getMissingSubs] –ò—Ç–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫: ${missing.length} –∏–∑ ${REQUIRED_CHANNELS.length}`
  );
  return missing;
}

/** –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å¬ª */
function subscribeKeyboard(channels) {
  console.log(
    `[subscribeKeyboard] –°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤: ${channels.join(", ")}`
  );
  const rows = channels.map((ch) => {
    const url = `https://t.me/${String(ch).replace("@", "")}`;
    console.log(`[subscribeKeyboard] –ö–∞–Ω–∞–ª ${ch} -> URL: ${url}`);
    return [Markup.button.url(`‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: ${ch}`, url)];
  });
  rows.push([Markup.button.callback("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "chk_sub")]);
  console.log(
    `[subscribeKeyboard] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ${rows.length} –∫–Ω–æ–ø–∫–∞–º–∏`
  );
  return Markup.inlineKeyboard(rows);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// UI

const mainMenu = () =>
  Markup.keyboard([["üü¢ –ü—Ä–æ–¥–∞—Ç—å", "üîé –ö—É–ø–∏—Ç—å"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]])
    .resize()
    .persistent();

const operatorInlineKeyboard = () =>
  Markup.inlineKeyboard([
    [
      Markup.button.callback("–ú–¢–°", "op|–ú–¢–°"),
      Markup.button.callback("–ë–∏–ª–∞–π–Ω", "op|–ë–∏–ª–∞–π–Ω"),
    ],
    [
      Markup.button.callback("–ú–µ–≥–∞–§–æ–Ω", "op|–ú–µ–≥–∞–§–æ–Ω"),
      Markup.button.callback("Tele2", "op|Tele2"),
    ],
    [Markup.button.callback("‚úçÔ∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", "op|other")],
  ]);

const confirmKeyboard = (prefix) =>
  Markup.inlineKeyboard([
    [Markup.button.callback("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", `${prefix}_confirm`)],
    [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", `${prefix}_cancel`)],
  ]);

const escapeHTML = (s = "") =>
  s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

const formatRUB = (n) => {
  if (n === null || n === undefined || n === "") return "";
  const num = Number(String(n).replace(/[^\d]/g, ""));
  if (!Number.isFinite(num)) return String(n);
  return num.toLocaleString("ru-RU") + " ‚ÇΩ";
};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// SELL

const sellWizard = new Scenes.WizardScene(
  "sell-wizard",

  async (ctx) => {
    await ctx.replyWithHTML(
      "‚ú® <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
      operatorInlineKeyboard()
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.callbackQuery?.data?.startsWith("op|")) {
      const val = ctx.callbackQuery.data.split("|")[1];
      await ctx.answerCbQuery();
      if (val === "other") {
        await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:");
        return;
      } else {
        ctx.wizard.state.operator = val;
      }
    } else if (ctx.message?.text) {
      ctx.wizard.state.operator = ctx.message.text.trim();
    } else return;

    await ctx.replyWithHTML("üó∫Ô∏è –£–∫–∞–∂–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω –Ω–æ–º–µ—Ä–∞</b>:");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.region = ctx.message.text.trim();
    await ctx.replyWithHTML("üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.number = ctx.message.text.trim();
    await ctx.replyWithHTML("üí∞ –£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> (–≤ —Ä—É–±–ª—è—Ö):");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.price = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω):"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.contact = ctx.message.text.trim();

    const d = ctx.wizard.state;
    const preview =
      "üìû <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
      `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
      `–ù–æ–º–µ—Ä: <b>${escapeHTML(d.number)}</b>\n` +
      `–¶–µ–Ω–∞: <b>${escapeHTML(formatRUB(d.price))}</b>\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>`;

    await ctx.replyWithHTML(
      "üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:"
    );
    await ctx.replyWithHTML(preview, confirmKeyboard("sell"));
    return ctx.wizard.next();
  },

  // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  async (ctx) => {
    console.log(
      `[SELL] –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}, –¥–∞–Ω–Ω—ã–µ:`,
      ctx.callbackQuery?.data
    );
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    try {
      await ctx.answerCbQuery();
    } catch (e) {
      console.log(`[SELL] –û—à–∏–±–∫–∞ answerCbQuery:`, e.message);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
    if (data === "chk_sub") {
      console.log(`[SELL] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        console.log(
          `[SELL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
            ctx.from.id
          } –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: ${missing.join(", ")}`
        );

        // –ü—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å alert
        try {
          await ctx.answerCbQuery(
            `‚ùå –ï—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞: ${missing.join(", ")}`,
            {
              show_alert: true,
            }
          );
        } catch (e) {
          console.log(`[SELL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å alert:`, e.message);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
          await ctx.replyWithHTML(
            `‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
              `–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: <b>${missing.join(", ")}</b>\n\n` +
              `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.`
          );
          console.log(`[SELL] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö`);
        } catch (e) {
          console.error(`[SELL] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö:`, e);
        }

        return;
      }

      console.log(`[SELL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const d = ctx.wizard.state;
      const post = d.__pendingPost;

      if (post) {
        console.log(
          `[SELL] –ü—É–±–ª–∏–∫—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`
        );
        try {
          const sent = await sendToAll(ctx.telegram, post, {
            parse_mode: "HTML",
          });
          if (sent) {
            try {
              await ctx.editMessageText(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
              );
            } catch (editErr) {
              console.log(
                `[SELL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:`,
                editErr.message
              );
            }

            await ctx.replyWithHTML(
              `‚úÖ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!</b>\n\n` +
              `üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö: <b>${formatChannelsList()}</b>`,
              mainMenu()
            );
            console.log(
              `[SELL] –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`
            );
          } else {
            await ctx.replyWithHTML(
              "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
              mainMenu()
            );
          }
        } catch (e) {
          console.error(
            `[SELL] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`,
            e
          );
          await ctx.replyWithHTML(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            mainMenu()
          );
        }

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        delete d.__pendingPost;
        delete d.__intent;
        return ctx.scene.leave();
      } else {
        console.log(`[SELL] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
        await ctx.answerCbQuery("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", {
          show_alert: true,
        });
        return;
      }
    }

    if (data === "sell_confirm") {
      console.log(
        `[SELL] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`
      );
      const d = ctx.wizard.state;
      const post =
        "üìû <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
        `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
        `–ù–æ–º–µ—Ä: <b>${escapeHTML(d.number)}</b>\n` +
        `–¶–µ–Ω–∞: <b>${escapeHTML(formatRUB(d.price))}</b>\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>`;

      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        console.log(
          `[SELL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
            ctx.from.id
          } –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã: ${missing.join(", ")}`
        );
        ctx.wizard.state.__pendingPost = post;
        ctx.wizard.state.__intent = "sell";

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏
        ctx.session.__state = {
          __pendingPost: post,
          __intent: "sell",
        };

        console.log(
          `[SELL] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`
        );
        try {
          await ctx.replyWithHTML(
            "üì¢ <b>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n" +
              "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª:",
            subscribeKeyboard(missing)
          );
          console.log(
            `[SELL] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`
          );
        } catch (e) {
          console.error(
            `[SELL] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}:`,
            e
          );
        }
        return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —à–∞–≥–µ
      }

      try {
        const sent = await sendToAll(ctx.telegram, post, {
          parse_mode: "HTML",
        });
        if (sent) {
          await ctx.replyWithHTML(
            `‚úÖ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!</b>\n\n` +
            `üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö: <b>${formatChannelsList()}</b>`,
            mainMenu()
          );
        } else {
          await ctx.replyWithHTML(
            "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID/EXTRA_CHAT_IDS.",
            mainMenu()
          );
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e);
        await ctx.replyWithHTML(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞.",
          mainMenu()
        );
      }
      return ctx.scene.leave();
    } else if (data === "sell_cancel") {
      await ctx.replyWithHTML("‚ùé –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
  }
);

sellWizard.command("cancel", async (ctx) => {
  await ctx.replyWithHTML("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
  return ctx.scene.leave();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// BUY

const buyWizard = new Scenes.WizardScene(
  "buy-wizard",

  async (ctx) => {
    await ctx.replyWithHTML(
      "üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–º–µ—Ä–∞</b>\n\n" +
        "‚úçÔ∏è <b>–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä –∏—â–∏—Ç–µ?</b>\n" +
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>9999 –Ω–∞ –∫–æ–Ω—Ü–µ</code>, <code>***7777</code>, <code>–∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–¥</code>"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.pattern = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üì° –í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
      operatorInlineKeyboard()
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.callbackQuery?.data?.startsWith("op|")) {
      const val = ctx.callbackQuery.data.split("|")[1];
      await ctx.answerCbQuery();
      if (val === "other") {
        await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:");
        return;
      } else {
        ctx.wizard.state.operator = val;
      }
    } else if (ctx.message?.text) {
      ctx.wizard.state.operator = ctx.message.text.trim();
    } else return;

    await ctx.replyWithHTML(
      "üí∞ <b>–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?</b> (—Ä—É–±.)\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>12000</code>"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.budget = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üó∫Ô∏è <b>–†–µ–≥–∏–æ–Ω –Ω–æ–º–µ—Ä–∞</b> (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫):"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.region = ctx.message.text.trim();
    await ctx.replyWithHTML(
      "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω):"
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.contact = ctx.message.text.trim();
    await ctx.replyWithHTML("üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):");
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.comment = ctx.message.text.trim();

    const d = ctx.wizard.state;
    const preview =
      "üîé <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
      `–ò—â—É –Ω–æ–º–µ—Ä: <b>${escapeHTML(d.pattern)}</b>\n` +
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
      `–ë—é–¥–∂–µ—Ç: <b>${escapeHTML(formatRUB(d.budget))}</b>\n` +
      `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>\n` +
      `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${escapeHTML(d.comment)}</b>`;

    await ctx.replyWithHTML(
      "üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    );
    await ctx.replyWithHTML(preview, confirmKeyboard("buy"));
    return ctx.wizard.next();
  },

  // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  async (ctx) => {
    console.log(
      `[BUY] –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}, –¥–∞–Ω–Ω—ã–µ:`,
      ctx.callbackQuery?.data
    );
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    try {
      await ctx.answerCbQuery();
    } catch (e) {
      console.log(`[BUY] –û—à–∏–±–∫–∞ answerCbQuery:`, e.message);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
    if (data === "chk_sub") {
      console.log(`[BUY] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        console.log(
          `[BUY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
            ctx.from.id
          } –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: ${missing.join(", ")}`
        );

        // –ü—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å alert
        try {
          await ctx.answerCbQuery(
            `‚ùå –ï—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞: ${missing.join(", ")}`,
            {
              show_alert: true,
            }
          );
        } catch (e) {
          console.log(`[BUY] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å alert:`, e.message);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
          await ctx.replyWithHTML(
            `‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
              `–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: <b>${missing.join(", ")}</b>\n\n` +
              `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.`
          );
          console.log(`[BUY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö`);
        } catch (e) {
          console.error(`[BUY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö:`, e);
        }

        return;
      }

      console.log(`[BUY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
      const d = ctx.wizard.state;
      const post = d.__pendingPost;

      if (post) {
        console.log(`[BUY] –ü—É–±–ª–∏–∫—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        try {
          const sent = await sendToAll(ctx.telegram, post, {
            parse_mode: "HTML",
          });
          if (sent) {
            try {
              await ctx.editMessageText(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ó–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!"
              );
            } catch (editErr) {
              console.log(
                `[BUY] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:`,
                editErr.message
              );
            }

            await ctx.replyWithHTML(
              `‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n` +
              `üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö: <b>${formatChannelsList()}</b>`,
              mainMenu()
            );
            console.log(
              `[BUY] –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`
            );
          } else {
            await ctx.replyWithHTML(
              "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
              mainMenu()
            );
          }
        } catch (e) {
          console.error(
            `[BUY] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`,
            e
          );
          await ctx.replyWithHTML(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            mainMenu()
          );
        }

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        delete d.__pendingPost;
        delete d.__intent;
        return ctx.scene.leave();
      } else {
        console.log(`[BUY] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
        await ctx.answerCbQuery("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", {
          show_alert: true,
        });
        return;
      }
    }

    if (data === "buy_confirm") {
      console.log(`[BUY] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      const d = ctx.wizard.state;
      const post =
        "üîé <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
        `–ò—â—É –Ω–æ–º–µ—Ä: <b>${escapeHTML(d.pattern)}</b>\n` +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
        `–ë—é–¥–∂–µ—Ç: <b>${escapeHTML(formatRUB(d.budget))}</b>\n` +
        `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${escapeHTML(d.comment)}</b>`;

      const missing = await getMissingSubs(ctx.telegram, ctx.from.id);
      if (missing.length) {
        console.log(
          `[BUY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
            ctx.from.id
          } –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã: ${missing.join(", ")}`
        );
        ctx.wizard.state.__pendingPost = post;
        ctx.wizard.state.__intent = "buy";

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏
        ctx.session.__state = {
          __pendingPost: post,
          __intent: "buy",
        };

        console.log(
          `[BUY] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`
        );
        try {
          await ctx.replyWithHTML(
            "üì¢ <b>–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n" +
              "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª:",
            subscribeKeyboard(missing)
          );
          console.log(
            `[BUY] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}`
          );
        } catch (e) {
          console.error(
            `[BUY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}:`,
            e
          );
        }
        return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —à–∞–≥–µ
      }

      try {
        const sent = await sendToAll(ctx.telegram, post, {
          parse_mode: "HTML",
        });
        if (sent) {
          await ctx.replyWithHTML(
            `‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!</b>\n\n` +
            `üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö: <b>${formatChannelsList()}</b>`,
            mainMenu()
          );
        } else {
          await ctx.replyWithHTML(
            "‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID/EXTRA_CHAT_IDS.",
            mainMenu()
          );
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e);
        await ctx.replyWithHTML(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞.",
          mainMenu()
        );
      }
      return ctx.scene.leave();
    } else if (data === "buy_cancel") {
      await ctx.replyWithHTML("‚ùé –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
  }
);

buyWizard.command("cancel", async (ctx) => {
  await ctx.replyWithHTML("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
  return ctx.scene.leave();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Bootstrap

async function bootstrap() {
  const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 30_000 });

  const stage = new Scenes.Stage([sellWizard, buyWizard]);
  bot.use(session());
  bot.use(stage.middleware());

  const sendWelcome = async (ctx) => {
    const text =
      "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n" +
      "–Ø –ø–æ–º–æ–≥—É <b>–ø—Ä–æ–¥–∞—Ç—å</b> –∏–ª–∏ <b>–∫—É–ø–∏—Ç—å</b> –∫—Ä–∞—Å–∏–≤—ã–π –Ω–æ–º–µ—Ä.\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:";
    await ctx.replyWithHTML(text, mainMenu());
  };

  bot.start(sendWelcome);
  bot.command("menu", sendWelcome);

  bot.hears("‚ÑπÔ∏è –ü–æ–º–æ—â—å", async (ctx) => {
    await ctx.replyWithHTML(
      "üìñ <b>–ü–æ–º–æ—â—å</b>\n" +
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üü¢ –ü—Ä–æ–¥–∞—Ç—å</b>, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n" +
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üîé –ö—É–ø–∏—Ç—å</b>, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n" +
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>/cancel</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n" +
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ <b>/menu</b> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    );
  });

  bot.hears("üü¢ –ü—Ä–æ–¥–∞—Ç—å", (ctx) => ctx.scene.enter("sell-wizard"));
  bot.hears("üîé –ö—É–ø–∏—Ç—å", (ctx) => ctx.scene.enter("buy-wizard"));

  bot.command("sell", (ctx) => ctx.scene.enter("sell-wizard"));
  bot.command("buy", (ctx) => ctx.scene.enter("buy-wizard"));

  bot.command("cancel", async (ctx) => {
    if (ctx.scene?.current) {
      await ctx.replyWithHTML("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
    await sendWelcome(ctx);
  });

  bot.on("text", async (ctx, next) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if (ctx.from.is_bot) {
      console.log("–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:", ctx.from.id);
      return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã)
    if (ctx.chat.type !== "private") {
      console.log("–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞:", ctx.chat.id);
      return;
    }

    if (ctx.scene?.current) return next();
    return sendWelcome(ctx);
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback query
  bot.on("callback_query", async (ctx, next) => {
    console.log(
      `[callback_query] –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}: ${ctx.callbackQuery.data}`
    );
    return next();
  });

  // –ö–Ω–æ–ø–∫–∞ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ wizard'–æ–≤

  try {
    console.log("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook...");
    await bot.telegram.deleteWebhook();
    console.log("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
  } catch (e) {
    console.warn(
      "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å):",
      e?.description || e?.message || e
    );
  }

  console.log("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling...");
  await bot.launch({ dropPendingUpdates: true });
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling).");
  console.log("–¶–µ–ª–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", CHAT_TARGETS);

  process.once("SIGINT", () => bot.stop("SIGINT"));
  process.once("SIGTERM", () => bot.stop("SIGTERM"));
}

bootstrap().catch((e) => {
  console.error("Fatal error:", e);
  process.exit(1);
});
