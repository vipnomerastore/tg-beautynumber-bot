// index.js
// 1) –ì—Ä—É–∑–∏–º .env –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏ –∏ –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config({
  path: "/opt/tg-beautynumber-bot/.env", // ‚Üê –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ–Ω—è–π –ø—É—Ç—å
  override: true,
});

const { Telegraf, Scenes, session, Markup } = require("telegraf");

const BOT_TOKEN = process.env.BOT_TOKEN || "";
const TARGET_CHAT_ID = Number(process.env.TARGET_CHAT_ID || 0);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–∞–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
console.log("BOT_TOKEN length:", BOT_TOKEN.length);
console.log("BOT_TOKEN has whitespace?", /\s/.test(BOT_TOKEN));

// –ñ—ë—Å—Ç–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è "digits:hash")
const tokenLooksValid = /^\d+:[A-Za-z0-9_\-]{30,}$/.test(BOT_TOKEN);
if (!tokenLooksValid) {
  console.error(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç digits:hash). –ü—Ä–æ–≤–µ—Ä—å .env"
  );
  process.exit(1);
}
if (!TARGET_CHAT_ID) {
  console.warn(
    "WARNING: TARGET_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç."
  );
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// UI helpers

const OPERATORS = ["–ú–¢–°", "–ë–∏–ª–∞–π–Ω", "–ú–µ–≥–∞–§–æ–Ω", "–¢–µ–ª–µ 2"];

const mainMenu = () =>
  Markup.keyboard([["üü¢ –ü—Ä–æ–¥–∞—Ç—å", "üîé –ö—É–ø–∏—Ç—å"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]])
    .resize()
    .persistent();

const operatorInlineKeyboard = () =>
  Markup.inlineKeyboard([
    [
      Markup.button.callback("–ú–¢–°", "op|–ú–¢–°"),
      Markup.button.callback("–ë–∏–ª–∞–π–Ω", "op|–ë–∏–ª–∞–π–Ω"),
    ],
    [
      Markup.button.callback("–ú–µ–≥–∞–§–æ–Ω", "op|–ú–µ–≥–∞–§–æ–Ω"),
      Markup.button.callback("–¢–µ–ª–µ 2", "op|–¢–µ–ª–µ 2"),
    ],
    [Markup.button.callback("‚úçÔ∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", "op|other")],
  ]);

const confirmKeyboard = (prefix) =>
  Markup.inlineKeyboard([
    [Markup.button.callback("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", `${prefix}_confirm`)],
    [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", `${prefix}_cancel`)],
  ]);

const escapeHTML = (s = "") =>
  s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

const formatRUB = (n) => {
  if (n === null || n === undefined || n === "") return "";
  const num = Number(String(n).replace(/[^\d]/g, ""));
  if (!Number.isFinite(num)) return String(n);
  return num.toLocaleString("ru-RU") + " ‚ÇΩ";
};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// SELL scene (–º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥)

const sellWizard = new Scenes.WizardScene(
  "sell-wizard",

  // Step 0 ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä (–∫–Ω–æ–ø–∫–∏)
  async (ctx) => {
    await ctx.reply(
      "‚ú® <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
      { parse_mode: "HTML", ...operatorInlineKeyboard() }
    );
    return ctx.wizard.next();
  },

  // Step 1 ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–∏–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞) ‚Üí —Å–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏–æ–Ω
  async (ctx) => {
    if (ctx.callbackQuery?.data?.startsWith("op|")) {
      const val = ctx.callbackQuery.data.split("|")[1];
      await ctx.answerCbQuery();
      if (val === "other") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:");
        return; // –æ—Å—Ç–∞–Ω–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç
      } else {
        ctx.wizard.state.operator = val;
      }
    } else if (ctx.message?.text) {
      ctx.wizard.state.operator = ctx.message.text.trim();
    } else {
      return;
    }

    await ctx.reply("üó∫Ô∏è –£–∫–∞–∂–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥</b>:", { parse_mode: "HTML" });
    return ctx.wizard.next();
  },

  // Step 2 ‚Äî —Ä–µ–≥–∏–æ–Ω ‚Üí –Ω–æ–º–µ—Ä
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.region = ctx.message.text.trim();
    await ctx.reply("üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):", {
      parse_mode: "HTML",
    });
    return ctx.wizard.next();
  },

  // Step 3 ‚Äî –Ω–æ–º–µ—Ä ‚Üí —Ü–µ–Ω–∞
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.number = ctx.message.text.trim();
    await ctx.reply("üí∞ –£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> (–≤ —Ä—É–±–ª—è—Ö):", {
      parse_mode: "HTML",
    });
    return ctx.wizard.next();
  },

  // Step 4 ‚Äî —Ü–µ–Ω–∞ ‚Üí –∫–æ–Ω—Ç–∞–∫—Ç
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.price = ctx.message.text.trim();
    await ctx.reply("üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω):", {
      parse_mode: "HTML",
    });
    return ctx.wizard.next();
  },

  // Step 5 ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.contact = ctx.message.text.trim();

    const d = ctx.wizard.state;
    const preview =
      "üìû <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
      `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
      `–ù–æ–º–µ—Ä: <b>${escapeHTML(d.number)}</b>\n` +
      `–¶–µ–Ω–∞: <b>${escapeHTML(formatRUB(d.price))}</b>\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>`;

    await ctx.reply(
      "üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
      { parse_mode: "HTML" }
    );
    await ctx.reply(preview, {
      parse_mode: "HTML",
      ...confirmKeyboard("sell"),
    });

    return ctx.wizard.next();
  },

  // Step 6 ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
  async (ctx) => {
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;
    await ctx.answerCbQuery();

    if (data === "sell_confirm") {
      const d = ctx.wizard.state;
      const post =
        "üìû <b>–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
        `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
        `–ù–æ–º–µ—Ä: <b>${escapeHTML(d.number)}</b>\n` +
        `–¶–µ–Ω–∞: <b>${escapeHTML(formatRUB(d.price))}</b>\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>`;

      try {
        if (!TARGET_CHAT_ID) {
          await ctx.reply("‚ö†Ô∏è TARGET_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
        } else {
          await ctx.telegram.sendMessage(TARGET_CHAT_ID, post, {
            parse_mode: "HTML",
          });
          await ctx.reply(
            "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!",
            mainMenu()
          );
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", e);
        await ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞."
        );
      }
    } else if (data === "sell_cancel") {
      await ctx.reply("‚ùé –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
    }

    return ctx.scene.leave();
  }
);

// /cancel –¥–ª—è SELL
sellWizard.command("cancel", async (ctx) => {
  await ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
  return ctx.scene.leave();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// BUY scene (–º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥)

const buyWizard = new Scenes.WizardScene(
  "buy-wizard",

  // Step 0 ‚Äî –ö–∞–∫–æ–π –Ω–æ–º–µ—Ä –∏—â–∏—Ç–µ
  async (ctx) => {
    await ctx.reply(
      "üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–º–µ—Ä–∞</b>\n\n" +
        "‚úçÔ∏è <b>–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä –∏—â–∏—Ç–µ?</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>9999 –Ω–∞ –∫–æ–Ω—Ü–µ</code>, <code>***7777</code>, <code>–∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–¥</code>",
      { parse_mode: "HTML" }
    );
    return ctx.wizard.next();
  },

  // Step 1 ‚Äî pattern ‚Üí –æ–ø–µ—Ä–∞—Ç–æ—Ä (–∫–Ω–æ–ø–∫–∏)
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.pattern = ctx.message.text.trim();

    await ctx.reply("üì° –í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", {
      parse_mode: "HTML",
      ...operatorInlineKeyboard(),
    });
    return ctx.wizard.next();
  },

  // Step 2 ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä ‚Üí –±—é–¥–∂–µ—Ç
  async (ctx) => {
    if (ctx.callbackQuery?.data?.startsWith("op|")) {
      const val = ctx.callbackQuery.data.split("|")[1];
      await ctx.answerCbQuery();
      if (val === "other") {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:");
        return; // –∂–¥—ë–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      } else {
        ctx.wizard.state.operator = val;
      }
    } else if (ctx.message?.text) {
      ctx.wizard.state.operator = ctx.message.text.trim();
    } else {
      return;
    }

    await ctx.reply(
      "üí∞ <b>–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?</b> (—Ä—É–±.)\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>12000</code>",
      { parse_mode: "HTML" }
    );
    return ctx.wizard.next();
  },

  // Step 3 ‚Äî –±—é–¥–∂–µ—Ç ‚Üí —Ä–µ–≥–∏–æ–Ω
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.budget = ctx.message.text.trim();

    await ctx.reply(
      "üó∫Ô∏è <b>–†–µ–≥–∏–æ–Ω –Ω–æ–º–µ—Ä–∞</b> (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Ç–æ –ø—Ä–æ—á–µ—Ä–∫):",
      { parse_mode: "HTML" }
    );
    return ctx.wizard.next();
  },

  // Step 4 ‚Äî —Ä–µ–≥–∏–æ–Ω ‚Üí –∫–æ–Ω—Ç–∞–∫—Ç
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.region = ctx.message.text.trim();

    await ctx.reply("üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b> (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω):", {
      parse_mode: "HTML",
    });
    return ctx.wizard.next();
  },

  // Step 5 ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.contact = ctx.message.text.trim();

    await ctx.reply("üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", {
      parse_mode: "HTML",
    });
    return ctx.wizard.next();
  },

  // Step 6 ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    if (!ctx.message?.text) return;
    ctx.wizard.state.comment = ctx.message.text.trim();

    const d = ctx.wizard.state;
    const preview =
      "üîé <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
      `–ò—Å–∫–æ–º—ã–π –Ω–æ–º–µ—Ä: <b>${escapeHTML(d.pattern)}</b>\n` +
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
      `–ë—é–¥–∂–µ—Ç: <b>${escapeHTML(formatRUB(d.budget))}</b>\n` +
      `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>\n` +
      `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${escapeHTML(d.comment)}</b>`;

    await ctx.reply("üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", {
      parse_mode: "HTML",
    });
    await ctx.reply(preview, { parse_mode: "HTML", ...confirmKeyboard("buy") });
    return ctx.wizard.next();
  },

  // Step 7 ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
  async (ctx) => {
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;
    await ctx.answerCbQuery();

    if (data === "buy_confirm") {
      const d = ctx.wizard.state;
      const post =
        "üîé <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞</b>\n" +
        `–ò—Å–∫–æ–º—ã–π –Ω–æ–º–µ—Ä: <b>${escapeHTML(d.pattern)}</b>\n` +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä: <b>${escapeHTML(d.operator)}</b>\n` +
        `–ë—é–¥–∂–µ—Ç: <b>${escapeHTML(formatRUB(d.budget))}</b>\n` +
        `–†–µ–≥–∏–æ–Ω: <b>${escapeHTML(d.region)}</b>\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç: <b>${escapeHTML(d.contact)}</b>\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${escapeHTML(d.comment)}</b>`;

      try {
        if (!TARGET_CHAT_ID) {
          await ctx.reply("‚ö†Ô∏è TARGET_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.");
        } else {
          await ctx.telegram.sendMessage(TARGET_CHAT_ID, post, {
            parse_mode: "HTML",
          });
          await ctx.reply("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!", mainMenu());
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", e);
        await ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞."
        );
      }
    } else if (data === "buy_cancel") {
      await ctx.reply("‚ùé –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
    }

    return ctx.scene.leave();
  }
);

// /cancel –¥–ª—è BUY
buyWizard.command("cancel", async (ctx) => {
  await ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
  return ctx.scene.leave();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Bootstrap

async function bootstrap() {
  const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 30_000 });

  const stage = new Scenes.Stage([sellWizard, buyWizard]);
  bot.use(session());
  bot.use(stage.middleware());

  // /start –∏ –º–µ–Ω—é
  const sendWelcome = async (ctx) => {
    const text =
      "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n" +
      "–Ø –ø–æ–º–æ–≥—É <b>–ø—Ä–æ–¥–∞—Ç—å</b> –∏–ª–∏ <b>–∫—É–ø–∏—Ç—å</b> –∫—Ä–∞—Å–∏–≤—ã–π –Ω–æ–º–µ—Ä.\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:";
    await ctx.reply(text, { parse_mode: "HTML", ...mainMenu() });
  };

  bot.start(sendWelcome);
  bot.command("menu", sendWelcome);
  bot.hears("‚ÑπÔ∏è –ü–æ–º–æ—â—å", async (ctx) => {
    await ctx.reply(
      "üìñ <b>–ü–æ–º–æ—â—å</b>\n" +
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üü¢ –ü—Ä–æ–¥–∞—Ç—å</b>, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n" +
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üîé –ö—É–ø–∏—Ç—å</b>, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n" +
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>/cancel</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n" +
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ <b>/menu</b> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
      { parse_mode: "HTML" }
    );
  });

  // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
  bot.hears("üü¢ –ü—Ä–æ–¥–∞—Ç—å", (ctx) => ctx.scene.enter("sell-wizard"));
  bot.hears("üîé –ö—É–ø–∏—Ç—å", (ctx) => ctx.scene.enter("buy-wizard"));

  // –ö–æ–º–∞–Ω–¥—ã
  bot.command("sell", (ctx) => ctx.scene.enter("sell-wizard"));
  bot.command("buy", (ctx) => ctx.scene.enter("buy-wizard"));
  bot.command("cancel", async (ctx) => {
    if (ctx.scene?.current) {
      await ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu());
      return ctx.scene.leave();
    }
    await sendWelcome(ctx);
  });

  // –§–æ–ª–ª–±–µ–∫: –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ –≤ —Å—Ü–µ–Ω–µ
  bot.on("text", async (ctx, next) => {
    if (ctx.scene?.current) return next();
    return sendWelcome(ctx);
  });

  // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º webhook (–º—ã –Ω–∞ long polling)
  try {
    await bot.telegram.deleteWebhook();
  } catch (e) {
    console.warn(
      "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å):",
      e?.description || e?.message || e
    );
  }

  // –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –ø–æ—Ç–æ–º –ª–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
  await bot.launch({ dropPendingUpdates: true });
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling).");

  process.once("SIGINT", () => bot.stop("SIGINT"));
  process.once("SIGTERM", () => bot.stop("SIGTERM"));
}

bootstrap().catch((e) => {
  console.error("Fatal error:", e);
  process.exit(1);
});
